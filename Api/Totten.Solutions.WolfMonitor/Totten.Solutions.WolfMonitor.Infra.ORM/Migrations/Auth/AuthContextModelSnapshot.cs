// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Totten.Solutions.WolfMonitor.Infra.ORM.Contexts;

namespace Totten.Solutions.WolfMonitor.Infra.ORM.Migrations.Auth
{
    [DbContext(typeof(AuthContext))]
    partial class AuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Totten.Solutions.WolfMonitor.Domain.Features.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedIn");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Removed");

                    b.Property<DateTime>("UpdatedIn");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62194933-f75f-4e97-a9f0-be2afc929abd"),
                            CreatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 896, DateTimeKind.Local).AddTicks(7323),
                            Level = 0,
                            Name = "Agent",
                            Removed = false,
                            UpdatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 901, DateTimeKind.Local).AddTicks(8587)
                        },
                        new
                        {
                            Id = new Guid("cf0a5a79-0309-4747-9da3-8b85dff2d633"),
                            CreatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 904, DateTimeKind.Local).AddTicks(1864),
                            Level = 1,
                            Name = "User",
                            Removed = false,
                            UpdatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 904, DateTimeKind.Local).AddTicks(1912)
                        },
                        new
                        {
                            Id = new Guid("02519d3e-6aaa-488a-96a8-b79093c0fc19"),
                            CreatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 904, DateTimeKind.Local).AddTicks(2103),
                            Level = 2,
                            Name = "Administrador",
                            Removed = false,
                            UpdatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 904, DateTimeKind.Local).AddTicks(2123)
                        },
                        new
                        {
                            Id = new Guid("f064e428-4dd6-442c-9c8d-3e1590fdef3f"),
                            CreatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 904, DateTimeKind.Local).AddTicks(2162),
                            Level = 3,
                            Name = "System",
                            Removed = false,
                            UpdatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 904, DateTimeKind.Local).AddTicks(2176)
                        });
                });

            modelBuilder.Entity("Totten.Solutions.WolfMonitor.Domain.Features.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Cpf")
                        .IsRequired();

                    b.Property<DateTime>("CreatedIn");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Language")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<bool>("Removed");

                    b.Property<Guid>("RoleId");

                    b.Property<DateTime>("UpdatedIn");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c93f113-76b1-4caf-9628-be844a68cb50"),
                            CompanyId = new Guid("c576cf93-370c-4464-21f9-08d763d27d75"),
                            Cpf = "10685805425",
                            CreatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 931, DateTimeKind.Local).AddTicks(9885),
                            Email = "aleffmds@gmail.com",
                            FirstName = "Aleff",
                            Language = "pt-BR",
                            LastName = "Moura da Silva",
                            Login = "alefmoura",
                            Password = "YWLA/fjq/N2i5CmP6+HJMXDslpQwLLP2tHl4E9NaM8w=",
                            Removed = false,
                            RoleId = new Guid("f064e428-4dd6-442c-9c8d-3e1590fdef3f"),
                            UpdatedIn = new DateTime(2019, 11, 8, 20, 30, 39, 931, DateTimeKind.Local).AddTicks(9949)
                        });
                });

            modelBuilder.Entity("Totten.Solutions.WolfMonitor.Domain.Features.Users.User", b =>
                {
                    b.HasOne("Totten.Solutions.WolfMonitor.Domain.Features.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
